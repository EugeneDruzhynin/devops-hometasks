<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1268.v6eb_e2ee1a_85a">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3618.v13db_a_21f0fcf">
    <script>pipeline {
    agent any
    environment{
        NEXUS_REPO=&apos;word-cloud-build&apos;
        BRANCH=&apos;pipeline&apos;
    }
    stages {
        stage(&apos;Build app and upload to Nexus&apos;) {
            agent {
                docker { image &apos;golang:1.16&apos; }
            }
            steps {
                git &apos;https://github.com/EugeneDruzhynin/word-cloud-generator.git&apos;

                sh &apos;&apos;&apos;
                  pwd
                  make lint
                  make test&apos;&apos;&apos;

                sh &apos;&apos;&apos;export GOPATH=$WORKSPACE/go
                    export PATH=&quot;$PATH:$(go env GOPATH)/bin&quot;
                    go get github.com/tools/godep
                    go get github.com/smartystreets/goconvey
                    go get github.com/GeertJohan/go.rice/rice
                    go get github.com/wickett/word-cloud-generator/wordyapi
                    go get github.com/gorilla/mux
                    sed -i &quot;s/1.DEVELOPMENT/1.${BUILD_NUMBER}/g&quot; static/version
                    GOOS=linux GOARCH=amd64 go build -o ./artifacts/word-cloud-generator -v
                    gzip -f artifacts/word-cloud-generator
                    ls -l artifacts&apos;&apos;&apos;

                nexusArtifactUploader(
                    nexusVersion: &apos;nexus3&apos;,
                    protocol: &apos;http&apos;,
                    nexusUrl: &apos;nexus:8081&apos;,
                    groupId: &quot;${BRANCH}&quot;,
                    version: &quot;1.${BUILD_NUMBER}&quot;,
                    repository: &apos;word-cloud-build&apos;,
                    credentialsId: &apos;nexus_password&apos;,
                    artifacts: [
                        [artifactId: &apos;world-cloud-generator&apos;,
                        classifier: &apos;&apos;,
                        file: &apos;artifacts/word-cloud-generator.gz&apos;,
                        type: &apos;gz&apos;]
                    ]
                )
            }
        }
        stage (&apos;Upload for testing&apos;) {
            agent {
                dockerfile {
                    filename &apos;/vagrant/final/dockerfile-alpine&apos;
                }
            }
            steps {
                withCredentials([usernamePassword(credentialsId: &apos;nexus_password&apos;, usernameVariable: &apos;NEXUS_USER&apos;, passwordVariable: &apos;NEXUS_PASSWORD&apos;)]) {
                    sh &apos;&apos;&apos;
                        curl -u ${NEXUS_USER}:${NEXUS_PASSWORD} -X GET &quot;http://nexus:8081/repository/${NEXUS_REPO}/${BRANCH}/word-cloud-generator/1.${BUILD_NUMBER}/word-cloud-generator-1.${BUILD_NUMBER}.gz&quot;  -o /opt/wordcloud/word-cloud-generator.gz&quot;
                        gunzip -f /opt/wordcloud/word-cloud-generator.gz;chmod +x /opt/wordcloud/word-cloud-generator; sudo systemctl start wordcloud
                        sleep 10
                        res=`curl -s -H &quot;Content-Type: application/json&quot; -d &apos;{&quot;text&quot;:&quot;ths is a really really really important thing this is&quot;}&apos; http://alpine:8888/version 
| jq &apos;. | length&apos;`
                        if [ &quot;1&quot; != &quot;$res&quot; ]; then
                        exit 99
                        fi

                        res=`curl -s -H &quot;Content-Type: application/json&quot; -d &apos;{&quot;text&quot;:&quot;ths is a really really really important thing this is&quot;}&apos; http://alpine:8888/api | jq &apos;. | length&apos;`
                        if [ &quot;7&quot; != &quot;$res&quot; ]; then
                        exit 99
                        fi&apos;&apos;&apos;
                }
            }
        }
    }
}</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>